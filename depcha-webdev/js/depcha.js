////////////////////////////////////////////////
// GLOBAL VARIABLES

const BASE_URL = window.location.origin;
//console.log(`BASE URL: ${BASE_URL}`)

////////////////////////////////////////////////
// formateDate: formate date correctly for YYYY-MM-DD, YYYY-MM, YYYY; otherwise return false
function formateDate(date) {
    
    const regEx_Date_YYYY_MM_DD = /^\d{4}-\d{2}-\d{2}$/;
    const regEx_Date_YYYY_MM = /^\d{4}-\d{2}$/;
    const regEx_Date_YYYY = /^\d{4}$/;
    if (date.match(regEx_Date_YYYY_MM_DD)) {
        const when = new Date(date);
        return when.getDate() + "." + (when.getMonth() + 1) + "." + when.getFullYear();
    } else if (date.match(regEx_Date_YYYY_MM)) {
        const when = new Date(date);
        return (when.getMonth() + 1) + "." + when.getFullYear();
    } else if (regEx_Date_YYYY)
    return date; else {
        return false
    }
}

///////////////////////////////////////////////
// copies text (e.g. from code) into clipboard
function copy(id) {
    ta = document.createElement('textarea');
    ta.value = id.textContent;
    document.body.appendChild(ta);
    ta.select();
    document.execCommand('copy');
    document.body.removeChild(ta);
}

function copyText(text) {
    ta = document.createElement('textarea');
    ta.value = text;
    document.body.appendChild(ta);
    ta.select();
    document.execCommand('copy');
    document.body.removeChild(ta);
}

///////////////////////////////////////////////
// switch for entity view
function entityView() {
    
    let entityview = document.getElementById("entity-view-switch");
    let placeholder = document.getElementById("placeholder");
    let editiontab = document.getElementById("edition-tab");
    let colourswitch = document.getElementById("switch");
    let keytext = document.getElementById("stylekey");
    
    entityview.style.display = "block";
    placeholder.style.display = "none";

    
    //show entity view switch only when edition tab is active, otherwise hide
    if (colourswitch.checked === true) {
        keytext.style.display = "block";
    } else keytext.style.display = "none";
    
    if (editiontab.classList.contains('active') === true) {
        entityview.style.display = "block";
        placeholder.style.display = "none";
        return mySwitch;
    } else {
        entityview.style.display = "none";
        placeholder.style.display = "block";
        keytext.style.display = "none";
    }
}


///////////////////////////////////////////////
// colourisation of edition
function mySwitch() {
    
    let colourswitch = document.getElementById("switch");
    let decolourtext = document.getElementById("decolourise");
    let colourtext = document.getElementById("colourise");
    let keytext = document.getElementById("stylekey");
    let accounttitle = document.getElementsByClassName("account-title");
    let accountbook = document.getElementsByClassName("account-book");
    let imageviewer = document.getElementById("image-viewer");
    //get all the elements with typeof attribute (=different classes from bookkeeping ontology)
    let economicagent = document.querySelectorAll('[typeof="EconomicAgent"]');
    let individual = document.querySelectorAll('[typeof="Individual"]');
    let group = document.querySelectorAll('[typeof="Group"]');
    let organisation = document.querySelectorAll('[typeof="Organisation"]');
    let economicgood = document.querySelectorAll('[typeof="EconomicGood"]');
    let commodity = document.querySelectorAll('[typeof="Commodity"]');
    let service = document.querySelectorAll('[typeof="Service"]');
    let right = document.querySelectorAll('[typeof="Right"]');
    let place = document.querySelectorAll('[typeof="Place"]');
    let date = document.querySelectorAll('[typeof="Date"]');
    let transaction = document.querySelectorAll('[typeof="Transaction"]');
    let total = document.querySelectorAll('[typeof="Total Transaction"]');
    let subtotal = document.querySelectorAll('[typeof="Subtotal Transaction"]');
    let price = document.querySelectorAll('[typeof="Price"]');
    let money = document.querySelectorAll('[typeof="Monetary Value"]');
    let tax = document.querySelectorAll('[typeof="Tax"]');
    let currency = document.querySelectorAll('[typeof="Monetary Unit"]');
    let account = document.querySelectorAll('[typeof="Account"]');
    let debit = document.querySelectorAll('[data-title="bk:Transaction (Debit)"]');
    let credit = document.querySelectorAll('[data-title="bk:Transaction (Credit)"]');
    
    //make a list containing all the NodeLists that were generated by parsing the typeof attribute
    var titleinfo =[individual, group, organisation, economicagent, commodity, service, right, place, date, transaction, total, subtotal, price, money, tax, account]
    
    //toggle the class attribute with the different colour codes, fonts or any other style information from the edition.css
    for (let t of transaction) {
        t.classList.toggle("entry");
    };
    for (let ea of economicagent) {
        ea.classList.toggle("bg-ea");
    };
    for (let i of individual) {
        i.classList.toggle("bg-ea-individual");
    };
    for (let g of group) {
        g.classList.toggle("bg-ea-group");
    };
    for (let o of organisation) {
        o.classList.toggle("bg-ea-organisation");
    };
    for (let eg of economicgood) {
        eg.classList.toggle("bg-eg");
    };
    for (let c of commodity) {
        c.classList.toggle("bg-eg-commodity");
    };
    for (let s of service) {
        s.classList.toggle("bg-eg-service");
    };
    for (let r of right) {
        r.classList.toggle("bg-eg-right");
    };
    for (let p of place) {
        p.classList.toggle("bg-place");
    };
    for (let d of date) {
        d.classList.toggle("bg-date");
    };
    for (let tt of total) {
        tt.classList.toggle("total");
    };
    for (let st of subtotal) {
        st.classList.toggle("subtotal");
    };
    for (let m of money) {
        m.classList.toggle("numeric-value");
    };
    for (let tx of tax) {
        tx.classList.toggle("numeric-value");
    };
    for (let a of account) {
        a.classList.toggle("account");
    };
    for (let de of debit) {
        de.classList.toggle("debit");
    }
    for (let cr of credit) {
        cr.classList.toggle("credit");
    }
    
    
    
    
    //hide and show the colour key and adapt sticky top of editions with an imageviewer
    if (colourswitch.checked === true) {
        decolourtext.style.display = "block";
        colourtext.style.display = "none";
        keytext.style.display = "block";
        for (let list of titleinfo) {
            for (let item of list) {
                item.setAttribute("title", item.getAttribute("data-title"))
            }
        };
        for (let cur of currency) {
            cur.style.display = "inline-block";
        }
        for (let acc of accounttitle) {
            acc.style.display = "block";
        }
        for (let accbook of accountbook) {
            accbook.style.display = "block";
        }
        if (imageviewer == true) {
            imageviewer.setAttribute('style', 'top:214px; z-index:100;');
        }
        // take the data-title values of all elements and show the title information
        for (let list of titleinfo) {
            for (let item of list) {
                item.setAttribute("title", item.getAttribute("data-title"));
            }
        }
    } else {
        decolourtext.style.display = "none";
        colourtext.style.display = "block";
        keytext.style.display = "none";
        //remove the title information when entity view is switched off
        for (let list of titleinfo) {
            for (let item of list) {
                item.removeAttribute("title");
            }
        };
        for (let cur of currency) {
            cur.style.display = "none";
        }
         for (let accbook of accountbook) {
            accbook.style.display = "none";
        }
        for (let acc of accounttitle) {
            acc.style.display = "none";
        }
        if (imageviewer == true) {
            imageviewer.setAttribute('style', 'top:158px; z-index:100;');
        }
    }
}